import 'dart:developer';

import 'package:cunex_wellness/config/color.dart';
import 'package:cunex_wellness/features/calendar/providers/qr_code_provider.dart';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'qr_scanner_overlay.dart';

class QrScanScreen extends ConsumerStatefulWidget {
  const QrScanScreen({super.key});

  @override
  ConsumerState<QrScanScreen> createState() => _QrScanScreenState();
}

class _QrScanScreenState extends ConsumerState<QrScanScreen>
    with WidgetsBindingObserver {
  late MobileScannerController cameraController;
  bool isMounted = true;
  bool cameraInitialized = false;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á controller ‡∏ï‡∏≠‡∏ô initState ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å widget ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
    cameraController = MobileScannerController();

    // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å frame ‡πÅ‡∏£‡∏Å‡∏ñ‡∏π‡∏Å‡∏ß‡∏≤‡∏î
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (isMounted) {
        initializeCamera();
      }
    });
  }

  Future<void> initializeCamera() async {
    if (!isMounted || cameraInitialized) return;

    try {
      cameraInitialized = true;
      await cameraController.start();
    } catch (e) {
      cameraInitialized = false;
      log("Camera initialization error: $e");
    }
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å widget dependencies ‡∏û‡∏£‡πâ‡∏≠‡∏°
    if (!cameraInitialized && isMounted) {
      initializeCamera();
    }
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á/‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠)
    if (!isMounted) return;

    if (state == AppLifecycleState.inactive ||
        state == AppLifecycleState.paused) {
      cameraController.stop();
    } else if (state == AppLifecycleState.resumed) {
      if (cameraInitialized) {
        cameraController.start();
      }
    }
  }

  @override
  void dispose() {
    isMounted = false;
    WidgetsBinding.instance.removeObserver(this);

    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    try {
      cameraController.stop();
      cameraController.dispose();
    } catch (e) {
      log("Camera disposal error: $e");
    }

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (didPop, result) {
        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        if (didPop) {
          if (cameraInitialized) {
            cameraController.stop();
            cameraInitialized = false;
          }
        } else {
          // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
          if (cameraInitialized) {
            cameraController.stop();
            cameraInitialized = false;
          }
          if (mounted) {
            Navigator.of(context).pop();
          }
        }
      },
      child: LayoutBuilder(
        builder: (context, constraints) {
          final screenHeight = constraints.maxHeight;
          final screenWidth = constraints.maxWidth;

          return Scaffold(
            body: Stack(
              children: [
                // ‚úÖ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error
                MobileScanner(
                  controller: cameraController,
                  onDetect: (capture) {
                    if (!isMounted) return;

                    final barcodes = capture.barcodes;
                    if (barcodes.isNotEmpty) {
                      final code = barcodes.first.rawValue;
                      if (code != null && code != ref.read(qrCodeProvider)) {
                        if (!mounted) return;

                        ref.read(qrCodeProvider.notifier).setCode(code);

                        showDialog(
                          context: context,
                          barrierDismissible: true,
                          builder: (_) => AlertDialog(
                            title: const Text("QR Code Detected"),
                            content: Text(code),
                            actions: [
                              TextButton(
                                onPressed: () async {
                                  // ‡∏õ‡∏¥‡∏î dialog ‡∏Å‡πà‡∏≠‡∏ô
                                  Navigator.pop(context);

                                  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                                  if (cameraInitialized) {
                                    await cameraController.stop();
                                    cameraInitialized = false;
                                  }

                                  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ QR code
                                  ref.read(qrCodeProvider.notifier).clear();

                                  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ widget ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô navigate
                                  Future.delayed(Duration(milliseconds: 100),
                                      () {
                                    if (mounted) {
                                      context.pop();
                                    }
                                  });
                                },
                                child: const Text("OK"),
                              ),
                            ],
                          ),
                        );
                      }
                    }
                  },
                  errorBuilder: (context, error, child) {
                    return Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.error, color: Colors.red, size: 36),
                          SizedBox(height: 12),
                          Text(
                            '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ',
                            style: TextStyle(color: Colors.white, fontSize: 16),
                          ),
                          TextButton(
                            onPressed: () {
                              if (mounted) {
                                Navigator.pop(context);
                              }
                            },
                            child: Text(
                              '‡∏Å‡∏•‡∏±‡∏ö',
                              style: TextStyle(color: Colors.white),
                            ),
                          ),
                        ],
                      ),
                    );
                  },
                ),

                // ‚úÖ ‡πÑ‡∏Å‡∏î‡πå‡πÑ‡∏•‡∏ô‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
                const QRScannerOverlay(),

                // ‚úÖ UI ‡∏ã‡πâ‡∏≠‡∏ô SafeArea
                SafeArea(
                  child: Stack(
                    children: [
                      // ‚ùå ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î (X)
                      Positioned(
                        top: 16,
                        left: 16,
                        child: IconButton(
                          icon: const Icon(Icons.close, color: Colors.white),
                          onPressed: () async {
                            // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                            if (cameraInitialized) {
                              await cameraController.stop();
                              cameraInitialized = false;
                            }
                            if (mounted) {
                              Navigator.pop(context);
                            }
                          },
                        ),
                      ),

                      // üñºÔ∏è ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                      Positioned(
                        top: 16,
                        right: 16,
                        child: IconButton(
                          icon: const Icon(Icons.image, color: Colors.white),
                          onPressed: () {
                            // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏ß‡πá‡∏ö ‡∏õ‡∏¥‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
                            if (!kIsWeb) {
                              // cameraController.pickImage();
                            }
                          },
                        ),
                      ),

                      // ‚úÖ ‡∏õ‡∏∏‡πà‡∏° My QR code (responsive)
                      Positioned(
                        bottom: screenHeight * 0.28,
                        left: 0,
                        right: 0,
                        child: Center(
                          child: ElevatedButton.icon(
                            icon: const Icon(
                              Icons.qr_code,
                              color: Colors.white,
                            ),
                            label: const Text(
                              'My QR code',
                              style: TextStyle(color: Colors.white),
                            ),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: AppTheme.rosePink,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(30),
                              ),
                              padding: const EdgeInsets.symmetric(
                                vertical: 12,
                                horizontal: 24,
                              ),
                            ),
                            onPressed: () {
                              // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ QR Code ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
                            },
                          ),
                        ),
                      ),

                      // ‚úÖ ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ + ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
                      Positioned(
                        bottom: 0,
                        left: 0,
                        right: 0,
                        child: Container(
                          height: screenHeight * 0.23,
                          width: screenWidth,
                          padding: EdgeInsets.fromLTRB(
                            16,
                            16,
                            16,
                            screenHeight < 600 ? 16 : 24,
                          ), // responsive padding
                          color: Colors.white,
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: [
                              const Text(
                                'Scan QR code to add friend',
                                style: TextStyle(
                                  fontSize: 22,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.black,
                                ),
                              ),
                              const SizedBox(height: 8),
                              Container(
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 16,
                                  vertical: 10,
                                ),
                                decoration: BoxDecoration(
                                  color: Colors.grey.shade100,
                                  borderRadius: BorderRadius.circular(32),
                                ),
                                child: Row(
                                  children: [
                                    Container(
                                      padding: const EdgeInsets.all(6),
                                      decoration: BoxDecoration(
                                        color: AppTheme.rosePink,
                                        shape: BoxShape.circle,
                                      ),
                                      child: const Icon(
                                        Icons.search,
                                        color: Colors.white,
                                        size: 18,
                                      ),
                                    ),
                                    const SizedBox(width: 12),
                                    const Expanded(
                                      child: TextField(
                                        style: TextStyle(fontSize: 16),
                                        decoration: InputDecoration(
                                          hintText: "Search...",
                                          border: InputBorder.none,
                                          isDense: true,
                                          contentPadding: EdgeInsets.zero,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}
